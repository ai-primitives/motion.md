import { createApi } from "unsplash-js"\nimport nodeFetch from "node-fetch"\nimport axios from "axios"\n\nexport class StockService {\n  private unsplash\n  private storyblocksApiKey: string\n\n  constructor(config: { unsplashAccessKey?: string; storyblocksApiKey?: string }) {\n    this.unsplash = createApi({\n      accessKey: config.unsplashAccessKey || process.env.UNSPLASH_ACCESS_KEY || "",\n      fetch: nodeFetch as any\n    })\n    this.storyblocksApiKey = config.storyblocksApiKey || process.env.STORYBLOCKS_API_KEY || ""\n  }\n\n  async getVideo(query: string, config: StockVideoConfig) {\n    if (!this.storyblocksApiKey) {\n      throw new Error("Storyblocks API key is required")\n    }\n\n    const response = await axios.get(`https://api.storyblocks.com/api/v1/video/search`, {\n      params: {\n        query,\n        page: 1,\n        per_page: 1,\n        keywords: query,\n        content_type: config.quality || "4k"\n      },\n      headers: {\n        "Authorization": `Bearer ${this.storyblocksApiKey}`\n      }\n    })\n\n    if (!response.data.results?.length) {\n      throw new Error("No videos found")\n    }\n\n    return response.data.results[0]\n  }\n\n  async getImage(query: string, config: StockImageConfig) {\n    const result = await this.unsplash.search.getPhotos({\n      query,\n      perPage: 1,\n      orientation: "landscape"\n    })\n\n    if (!result.response?.results?.length) {\n      throw new Error("No images found")\n    }\n\n    const photo = result.response.results[0]\n    return {\n      url: photo.urls[config.quality || "regular"],\n      credit: `Photo by ${photo.user.name} on Unsplash`\n    }\n  }\n}
